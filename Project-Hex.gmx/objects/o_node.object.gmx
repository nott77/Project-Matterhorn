<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_hex_2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// State
state = "initializing";

// Create DS List
neighbors = ds_list_create();

// Color
color = c_white;

// Grid Vars
grid_x = 0;
grid_y = 0;
world_x = x;
world_y = y;

// Vars
occupant = noone;
accessible = true;
type = "node"

// Pathfinding Vars -----------------

parent = noone;
g_score = 0;
move_node = false;
cost = 1;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
o_player.actions = 2;
scr_movement_range(map[o_player.grid_x,o_player.grid_y], o_player.move, o_player.actions); 


if (accessible == true and occupant == noone) {
    if (mouse_check_button_pressed(mb_left)){
        if grid_x == global.mouse_grid_x and grid_y = global.mouse_grid_y {
            
            // Clear node
            map[o_player.grid_x, o_player.grid_y].occupant = noone; 
        
            // Update Position
            o_player.grid_x = grid_x;
            o_player.grid_y = grid_y; 
            o_player.x = x;
            o_player.y = y;
            
            // Update actors new node
            map[o_player.grid_x, o_player.grid_y].occupant = o_player.id; 
            
            // if selected actor perforemed double move deselect
            
            if (o_player.g_score &gt; o_player.move) {
                scr_wipe_nodes();
            } else {
                o_player.actions -= 1;
                
                if (o_player.actions &gt; 0) {
                    //re-preform movement range
                    scr_movement_range(map[o_player.grid_x,o_player.grid_y], o_player.move, o_player.actions); 
                } else {
                    scr_wipe_nodes();
                }                
                
            }
                      
            
        } else {
            scr_wipe_nodes();
        }                
    }    
}

///// Replace Nodes

switch (state) {
    case "initializing":
        with (o_node) {
            if (instance_position(x, y, o_terrain)) {
                
                temp_terrain = instance_position(x, y, o_terrain);
                
                switch (temp_terrain.type) {
                    case "sand":
                        type = "sand";
                        sprite_index = s_hex_2;
                        cost = 2;
                    break;
                    
                    case "rock":
                        type = "rock";
                        sprite_index = s_hex_2;
                        accessible = false;
                    break;
                    
                    case "gap":
                        type = "gap";
                        sprite_index = s_hex_2;
                        accessible = false;
                    break;
                }
                
                with (temp_terrain) {
                    instance_destroy();
                }  
            }
        }
    state = "ready";
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Mouse Check
global.mouse_grid_x = grid_x;
global.mouse_grid_y = grid_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/// DevMode
if global.devmode == true {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    
    // Grid x,y position
    draw_text(x, y-35, string(grid_x) + " , " + string(grid_y));
    
    // World x,y position
    draw_text(x, y-19, string(x) + " , " + string(y));
    
    // Occupant
    if (occupant != noone) {
        draw_text(x, y+30, occupant.name);
    }
    
    
    // Center BG circle
    draw_set_color(c_black);
    draw_set_alpha(0.7);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_circle(x, y, 11, false);
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    // Neighbor Coloring
    if ds_list_size(neighbors) = 1 {
        draw_set_color(c_purple);    
    }
    if ds_list_size(neighbors) = 2 {
        draw_set_color(c_aqua);    
    }
    if ds_list_size(neighbors) = 3 {
        draw_set_color(c_lime);  
    }
    if ds_list_size(neighbors) = 4 {
        draw_set_color(c_yellow);  
    }
    if ds_list_size(neighbors) = 5 {
        draw_set_color(c_orange);    
    }
    if ds_list_size(neighbors) = 6 {
        draw_set_color(c_red);
    }
    
    // Neighbor
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(x, y, string(ds_list_size(neighbors)));
    
    // Clears 
    draw_set_color(c_white);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, -1, x, y, 1, 1, 0, color, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
