<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ico_parent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enviornment INI

// vars
breakable = false;
//stuck = ds_list_create();
on_top = ds_list_create();
image_speed = 0;
alarm[0] = 1;
//piece_sprite = noone; //the sprite of the particle created when the block is destroyed

// Movement vars
vsp = 0;
vsp_max = 5;
hsp = 0;
hsp_max = 5;
cx = 0;
cy = 0;
fallthrough = false;
semi_solid = false;
collide_x = false;
collide_y = false;
entity = noone; //the id of the colliding entity
can_crush = false; //can we crush entities?
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free list memory
if (ds_exists(on_top, ds_type_list))
{
    ds_list_destroy(on_top);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
collide_x = false; //reset collide x &amp; y even when not moving
collide_y = false;

///Movement &amp; moving entities on top or stuck in the block
if (hsp != 0 || vsp != 0)
{
    ///Limit speed
    hsp = clamp(hsp, -hsp_max, hsp_max);
    vsp = clamp(vsp, -vsp_max, vsp_max);
    
    ///Set current position as previous position
    xprevious = x;
    yprevious = y;
    
    ///This is for inter-pixel movement!
    cx += hsp;
    cy += vsp;
    var hspNew = floor(cx);
    var vspNew = floor(cy);
    cx -= hspNew;
    cy -= vspNew;
    
    ///Get a list of all entities on top of this block
    ds_list_destroy(on_top);
    on_top = scr_env_get_entities(hspNew, vspNew, hspNew, vspNew);
    
    ///Horizontal movement
    if (hspNew != 0)
    {
        var ahsp = abs(hspNew);
        var shsp = ahsp/hspNew;
        for (var i = 0; i &lt; ahsp; i++)
        {
            if (!scr_check_collision(shsp, 0) &amp;&amp;
                !place_meeting(x+shsp, y, o_platform_reverse))
            {
                x += shsp;
            }
            else
            {
                hsp *= -1;
                collide_x = true;
                break;
            }
        }
    }
    
    ///Vertical movement
    if (vspNew != 0)
    {
        var avsp = abs(vspNew);
        var svsp = avsp/vspNew;
        for (var i = 0; i &lt; avsp; i++)
        {
            if (!scr_check_collision(0, svsp) &amp;&amp;
                !place_meeting(x, y+svsp, o_platform_reverse))
            {
                y += svsp;
            }
            else
            {
                vsp *= -1;
                collide_y = true;
                break;
            }
        }
    }
    
    ///Move all of the entities on top of this block
    scr_env_move_entities();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Free list memory
if (ds_exists(on_top, ds_type_list))
{
    ds_list_destroy(on_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
